Introduction to Relational Databases:
- Learn SQL
- Write Python Code
- Organize and store applications data in a database
- Use database as a tool to answer new questions

Lessons:
 -1) Relational Concepts
 -2) SQL Queries
 -3) Python DB-API
 -4) More SQL
 -5) Final Project

 What is a database?

 - It is a data structure like a list, that stores key-value pairs
 - Navgational DB
 - Relational DB
 - Key value store.

 Relational Databases?

 - Offers ability to compare and query and summarize data.
 - Offers ability to set constraints
 - Data stored in tables
 - Counting is an aggregation(operation that summarizes data from multiple rows into a single row)

 Common Aggregations in SQL:

 - count(takes values of any type and returns a number)
 - avg
 - max
 - min
 - sum

 How Queries Happen:

 - Sends Query
 - Data Responds with result in a new table
 - Could happen over network or on local disk

 Related Tables:

 - Queries that are connected are called joins
 - We can derive new tables from linking up existing tables using joins

 Uniqueness and Keys:

 - Unique id needs to be related to each thing
 - Primary Key - A column that uniquely identifies the rows in a table

 Joining Tables:

 - Example: select animals.name, animals.species, diet.food from
 animals join diet on animals.species = diet.species;

 Elements of SQL:

 - Select where statements

 Data Types supported by SQL:

 [Text and String Types]
 - text(any length), {char(n) - exactly n characters},
  {varchar(n) exactly n characters}

 [Numeric Types]
 - integer, real(decimal, acurate up to 6 decimal places),
   double precision(decimal, accurate up to 15 decimal places)
   decimal(an exact decimal value)

  [Date and Time Types]
 - date(calendar date, includes year, month, and date)
 - time(time of day)
 - timestamp(date and time together)

 Query Makeup:

 - begins with select
 - keyword + columns + keyword + tables + where/row restriction
 - supports boolean values(and && or)

 Columns and Tables in a database:

 - No standard way to list your tables and columns in a standard way
 - PostgreSQL: \dt and \d tablename
 - MySQL: show tables and describe tablename
 - SQLite: .tables and .schema tablename

 Select Clauses:

 - Limit count offset skip,(Limit 10 offset 150)
 - Order by columns Desc,(Order by species, name)
 - Group by columns(select species, min(birthdate) from animals group by species;) = for each species of animal, find the smallest value of the birthdate column, that is, the oldest animal's birthdate.
 - Select name, count(*) as num from animals group by name;
      (count all the rows and call the count colum 'num' aggregate by values of the name column)
 - limit count - renturns the first count rows of the result table
 - limit count offset skip - returns count rows starting after the skip rows
 - order by columns
 - order by columns desc
  - numerical columns sorted in numerical order
  - string colums sorted in alphabetical order
  - with desc, order is reversed

 - group by colums, changes the behaviors of aggregations such as max, count, and sum. With group by, the aggregation will return one row for each distint value in columns











Reference for the lesson:

For reference, here's a list of all the tables in the zoo database:

animals
This table lists individual animals in the zoo. Each animal has only one row. There may be multiple animals with the same name, or even multiple animals with the same name and species.
name — the animal's name (example: 'George')
species — the animal's species (example: 'gorilla')
birthdate — the animal's date of birth (example: '1998-05-18')
diet
This table matches up species with the foods they eat. Every species in the zoo eats at least one sort of food, and many eat more than one. If a species eats more than one food, there will be more than one row for that species.
species — the name of a species (example: 'hyena')
food — the name of a food that species eats (example: 'meat')
taxonomy
This table gives the (partial) biological taxonomic names for each species in the zoo. It can be used to find which species are more closely related to each other evolutionarily.
name — the common name of the species (e.g. 'jackal')
species — the taxonomic species name (e.g. 'aureus')
genus — the taxonomic genus name (e.g. 'Canis')
family — the taxonomic family name (e.g. 'Canidae')
t_order — the taxonomic order name (e.g. 'Carnivora')
If you've never heard of this classification, don't worry about it; the details won't be necessary for this course. But if you're curious, Wikipedia articles Taxonomy and Biological classification may help.

ordernames
This table gives the common names for each of the taxonomic orders in the taxonomy table.
t_order — the taxonomic order name (e.g. 'Cetacea')
name — the common name (e.g. 'whales and dolphins')
The SQL for it
And here are the SQL commands that were used to create those tables. We won't cover the create table command until lesson 4, but it may be interesting to look at:

create table animals (
       name text,
       species text,
       birthdate date);

create table diet (
       species text,
       food text);

create table taxonomy (
       name text,
       species text,
       genus text,
       family text,
       t_order text);

create table ordernames (
       t_order text,
       name text);





